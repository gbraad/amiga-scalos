/* CollectVersions.rexx */
/* 08 Nov 2009 11:41:47 */

options results

address command

PkgPath = "/products/scalos/update/"
tmpfname = "t:xyzzy"
versionfilename = "ram:versions.txt"


call addlib("rexxsupport.library", 0, -30, 0)

'version >' tmpfname
rc = open( 'tmpfile', tmpfname, 'R' )
versionstring = readln( 'tmpfile' )
rc = close( 'tmpfile' )
'delete ' || tmpfname || ' quiet'
if index(versionstring, "MorphOS") > 0 then
	do
	os = "MorphOS"
	end
else
	do
	versionstring =	strip(subword(versionstring, 2, 1), 'B', ',')
	if versionstring > 50 then
		os = "AmigaOS4"
	else
		os = "AmigaOS3"
	end

PkgPath = PkgPath || os || "/"
LocalPkgPath = "RAM:" || strip(PkgPath, 'L', '/')

say "Deleting old directory tree..."
"delete " || LocalPkgPath || " all QUIET"

'mkdir -v -p ' || LocalPkgPath


rc = open( 'versionfile', versionfilename, 'W' )

call writeln('versionfile', "; AUTOMATICALLY GENERATED FILE, DO NOT EDIT MANUALLY!!!")

/* Scalos main */
call getversion("scalos:", "scalos", "Scalos.catalog")

/* --- datatypes */
call getversion("sys:classes/datatypes", "amigaiconobject.datatype")
call getversion("sys:classes/datatypes", "amigaiconobj35.datatype")
call getversion("sys:classes/datatypes", "newiconobject.datatype")
call getversion("sys:classes/datatypes", "glowiconobject.datatype")
call getversion("sys:classes/datatypes", "pngiconobject.datatype")
call getversion("sys:classes/datatypes", "iconobject.datatype")

/* --- libraries */
call getversion("Libs:", "iconobject.library")
echo " "

/* --- prefs */
call getversion("scalos:prefs", "FileTypes.prefsplugin", "ScalosFileTypes.catalog")
call getversion("scalos:prefs", "Menu.prefsplugin", "ScalosMenu.catalog")
call getversion("scalos:prefs", "Pattern.prefsplugin", "ScalosPattern.catalog")
call getversion("scalos:prefs", "Palette.prefsplugin", "ScalosPalette.catalog")
call getversion("scalos:prefs", "PopupMenu.prefsplugin", "ScalosPopupMenu.catalog")
call getversion("scalos:prefs", "Scalos Menu", "ScalosMenu.catalog")
call getversion("scalos:prefs", "Scalos Palette", "ScalosPalette.catalog")
call getversion("scalos:prefs", "Scalos Pattern", "ScalosPattern.catalog")
call getversion("scalos:prefs", "Scalos Prefs", "Scalos_Prefs.catalog")

/* --- modules */
call getversion("scalos:modules", "Format_Disk.module", "FormatDisk.catalog")
call getversion("scalos:modules", "Delete.module", "Delete.catalog")
call getversion("scalos:modules", "Find.module", "Find.catalog")
call getversion("scalos:modules", "Empty_Trashcan.module", "Empty_Trashcan.catalog")
call getversion("scalos:modules", "Exchange.module", "Exchange.catalog")
call getversion("scalos:modules", "Execute_Command.module", "Execute_Command.catalog")
call getversion("scalos:modules", "IconProperties.module", "IconProperties.catalog")
call getversion("scalos:modules", "Information.module", "Information.catalog")
call getversion("scalos:modules", "NewDrawer.module", "NewDrawer.catalog")
call getversion("scalos:modules", "Rename.module", "Rename.catalog")
call getversion("scalos:modules", "WindowProperties.module", "WindowProperties.catalog")

/*  --- plugins */
call getversion("Scalos:Plugins/Filetypes", "drawercontents.plugin", "DrawerContentsPlugin.catalog")
call getversion("Scalos:Plugins/Filetypes", "exifpicture.plugin", "ExifPicturePlugin.catalog")
call getversion("Scalos:Plugins/Filetypes", "picturedimensions.plugin", "PictureDimensionsPlugin.catalog")

/* OOP Plugins */
call getversion("Scalos:Plugins/OOP", "devicefilter.plugin")
call getversion("Scalos:Plugins/OOP", "persist.plugin")
call getversion("Scalos:Plugins/OOP", "title_clock.plugin")
call getversion("Scalos:Plugins/OOP", "title_envvar.plugin")
call getversion("Scalos:Plugins/OOP", "title_freepens.plugin")
call getversion("Scalos:Plugins/OOP", "volumegauge.plugin")
call getversion("Scalos:Plugins/OOP", "wb39.plugin")
call getversion("Scalos:Plugins/OOP", "wbrexx.plugin")
call getversion("Scalos:Plugins/OOP", "xtwindows.plugin")

/* Menu plugins */
call getversion("Scalos:Plugins/Menu", "sorted_cleanup.plugin")

/* Preview plugins */
call getversion("Scalos:Plugins/Preview", "defpicture.pvplugin")
call getversion("Scalos:Plugins/Preview", "jpegpicture.pvplugin")
call getversion("Scalos:Plugins/Preview", "video.pvplugin")

/* --- 3rd party stuff */
call getversion("libs:", "guigfx.library")
call getversion("libs:", "render.library")
call getversion("libs:", "popupmenu.library")

rc = close( 'versionfile' )

exit


getversion: procedure expose PkgPath LocalPkgPath
parse arg dirname, filename, catalogname

connectstr = ""
if right(dirname,1) ~= ":" then connectstr = "/"

filePath = dirname || connectstr || filename
'version "' || filePath || '" >' tmpfname
/* say "version returned" rc */

if rc = 0 then
	do
	/* say dirname || connectstr || filename */

	rc = open( 'tmpfile', tmpfname, 'R' )
	versionstring = readln( 'tmpfile' )
	rc = close( 'tmpfile' )
	'delete ' || tmpfname || ' quiet'

	do wordpos=2 by 1
		vstring = subword(versionstring, wordpos)
		/* say wordpos vstring */
		/* say left(vstring, 1) */
		/* say index("Vv0123456789", left(vstring, 1)) */
		if index("Vv0123456789", left(vstring, 1)) > 0 then break
	end
	if index("Vv", left(vstring, 1)) > 0 then vstring = substr(vstring,2)
	vstring = subword(vstring, 1, 1)

	LHAName = LocalPkgPath || filename || ".lha"
	PkgName = PkgPath || filename || ".lha"

	vfstring = 'DIR="' || dirname || '" FILE="' || filename || '" VERSION=' || vstring || ' PKG="' || PkgName || '"'
	/* say vfstring */

	'lha -q -r -e -x a "' || LHAName || '" "' || filePath || '"'
	if rc ~= 0 then
		do
		say "lha failed with " || filePath || " not found!"
		return
		end

	if length(catalogname) > 0 then
		do
		catalogdir = "Locale:catalogs"
		languages = showdir(catalogdir)
		do n=0 by 1 to words(languages)
			lang = word(languages, n)
			scaloscatalogdir = catalogdir || "/" || lang || "/Scalos"
			scaloscatalogs = showdir(scaloscatalogdir)
			if length(scaloscatalogs) > 0 then
				do
				if index(scaloscatalogs, catalogname) > 0 then
					do
					catalog = scaloscatalogdir || "/" || catalogname
					'lha -q -r -e -x a "' || LHAName || '" "' || catalog || '"'
					if rc ~= 0 then
						do
						say "lha failed with " || filePath || " not found!"
						return
						end
					end
				end
		end
		end

		call writeln('versionfile', vfstring)
	end
else
	do
	say "File " || filePath || " not found!"
	end

return

