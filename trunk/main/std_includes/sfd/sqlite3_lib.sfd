==id $Id$
==copyright ©2006 The Scalos Team
==base _SQLite3Base
*==basetype struct Library *
*==libname sqlite3.library
==bias 30
==public
==include <exec/types.h>
==include <sqlite3.h>
LONG SQLite3Close(sqlite3 *db) (a0)
LONG SQLite3Exec(sqlite3 *db, CONST_STRPTR sql, sqlite3_callback xCallback, APTR pArg, STRPTR *errmsg) (a0,a1,a2,a3,d0)
*sqlite_int64 SQLite3LastInsertRowid(sqlite3 *db) (a0)
LONG SQLite3Changes(sqlite3 *db) (a0)
LONG SQLite3TotalChanges(sqlite3 *db) (a0)
VOID SQLite3Interrupt(sqlite3 *db) (a0)
LONG SQLite3Complete(CONST_STRPTR sql) (a0)
LONG SQLite3BusyHandler(sqlite3 *db, LONG(*callback)(APTR userdata, LONG l), APTR userdata) (a0, a1, a2)
LONG SQLite3BusyTimeout(sqlite3 *db, LONG ms) (a0, d0)
LONG SQLite3GetTable(sqlite3 *db, CONST_STRPTR sql, STRPTR **presult, LONG *nrow, LONG *ncolumn, STRPTR *errmsg) (a0,a1,a2,a3,d0,d1)
VOID SQLite3FreeTable(STRPTR *result) (a0)
*==varargs
*STRPTR SQLite3Mprintf(CONST_STRPTR fmt, ...) (a0)
*STRPTR SQLite3Vmprintf(CONST_STRPTR fmt, va_list args) (a0,a1)
VOID SQLite3Free(STRPTR z) (a0)
*==varargs
*STRPTR SQLite3Snprintf(LONG maxlen, STRPTR zbuf, CONST_STRPTR fmt, ...) (d0,a0,a1)
APTR SQLite3Trace(sqlite3 *db, VOID (*xTrace)(APTR p, CONST_STRPTR z), APTR parg) (a0,a1,a2)
*APTR SQLite3Profile(sqlite3 *db, VOID (*xProfile)(APTR ü, CONST_STRPTR z, sqlite_uint64), APTR) (a0,a1,a2)
VOID SQLite3ProgressHandler(sqlite3 *db, LONG nOps, LONG (*xProgress)(APTR p), APTR pArg) (a0,d0,a1,a2)
APTR SQLite3CommitHook(sqlite3 *db, LONG (*xCallback)(APTR p), APTR pArg) (a0,a1,a2)
LONG SQLite3Open(CONST_STRPTR filename, sqlite3 **ppDb) (a0,a1)
LONG SQLite3Errcode(sqlite3 *db) (a0)
CONST_STRPTR SQLite3Errmsg(sqlite3 *db) (a0)
LONG SQLite3Prepare(sqlite3 *db, CONST_STRPTR zSql, LONG nBytes, sqlite3_stmt **ppStmt, CONST_STRPTR *pzTail) (a0,a1,d0,a2,a3)
LONG SQLite3BindBlob(sqlite3_stmt *pStmt, LONG i, CONST_APTR zData, LONG nData, VOID (*xDel)(APTR p)) (a0,d0,a1,d1,a2)
*LONG SQLite3BindDouble(sqlite3_stmt *pStmt, LONG i, double) (a0,d0,?)
LONG SQLite3BindInt(sqlite3_stmt *pStmt, LONG i, LONG iValue) (a0,d0,d1)
*LONG SQLite3BindInt64(sqlite3_stmt *pStmt, LONG i, sqlite_int64 iValue) (a0,d0,?)
LONG SQLite3BindNull(sqlite3_stmt *pStmt, LONG i) (a0,d0)
LONG SQLite3BindText(sqlite3_stmt *pStmt, LONG i, CONST_STRPTR zData, LONG nData, VOID (*xDel)(APTR p)) (a0,d0,a1,d1,a2)
LONG SQLite3BindValue(sqlite3_stmt *pStmt, LONG i, CONST sqlite3_value *pVal) (a0,d0,a1)
LONG SQLite3BindParameterCount(sqlite3_stmt *pStmt) (a0)
CONST_STRPTR SQLite3BindParameterName(sqlite3_stmt *pStmt, LONG i) (a0,d0)
LONG SQLite3BindParameterIndex(sqlite3_stmt *pStmt, CONST_STRPTR zName) (a0,a1)
LONG SQLite3ClearBindings(sqlite3_stmt *pStmt) (a0)
LONG SQLite3ColumnCount(sqlite3_stmt *pStmt) (a0)
CONST_STRPTR SQLite3ColumnName(sqlite3_stmt *pStmt,LONG i) (a0,d0)
CONST_STRPTR SQLite3ColumnDecltype(sqlite3_stmt *pStmt, LONG i) (a0,d0)
LONG SQLite3Step(sqlite3_stmt *pStmt) (a0)
LONG SQLite3DataCount(sqlite3_stmt *pStmt) (a0)
CONST_APTR SQLite3ColumnBlob(sqlite3_stmt *pStmt, LONG iCol) (a0,d0)
LONG SQLite3ColumnBytes(sqlite3_stmt *pStmt, LONG iCol) (a0,d0)
*double SQLite3ColumnDouble(sqlite3_stmt *pStmt, LONG iCol) (a0,d0)
LONG SQLite3ColumnInt(sqlite3_stmt *pStmt, LONG iCol) (a0,d0)
*sqlite_inz64 SQLite3ColumnInt64(sqlite3_stmt *pStmt, LONG iCol) (a0,d0)
CONST_STRPTR SQLite3ColumnText(sqlite3_stmt *pStmt, LONG iCol) (a0,d0)
LONG SQLite3ColumnType(sqlite3_stmt *pStmt, LONG iCol) (a0,d0)
LONG SQLite3Finalize(sqlite3_stmt *pStmt) (a0)
LONG SQLite3Reset(sqlite3_stmt *pStmt) (a0)
*LONG SQLite3CreateFunction(sqlite3 *db, CONST_STRPTR zFunctionName, LONG nArg, LONG eTextRep, APTR userdata, VOID (*xFunc)(sqlite3_context *pCtx, LONG i, sqlite3_value **pVal), VOID (*xStep)(sqlite3_context *pCtx, LONG i, sqlite3_value **pVal), VOID (*xFinal)(sqlite3_context *pCtx)) (a0,a1,d0,d1,a2,a3,d2,d3)
LONG SQLite3AggregateCount(sqlite3_context *pCtx) (a0)
CONST_APTR SQLite3ValueBlob(sqlite3_value *pVal) (a0)
LONG SQLite3ValueBytes(sqlite3_value *pVal) (a0)
*CONST_APTR SQLite3ValueBytes16(sqlite3_value *pVal) (a0)
*CONST_APTR SQLite3ValueBytes16le(sqlite3_value *pVal) (a0)
*CONST_APTR SQLite3ValueBytes16be(sqlite3_value *pVal) (a0)
*double SQLite3ValueDouble(sqlite3_value *pVal) (a0)
LONG SQLite3ValueInt(sqlite3_value *pVal) (a0)
*sqlite_int64 SQLite3ValueInt64(sqlite3_value *pVal) (a0)
CONST_STRPTR SQLite3ValueText(sqlite3_value *pVal) (a0)
LONG SQLite3ValueType(sqlite3_value *pVal) (a0)
APTR SQLite3Aggregate_context(sqlite3_context *pCtx, LONG nBytes) (a0,d0)
APTR SQLite3UserData(sqlite3_context *pCtx) (a0)
APTR SQLite3GetAuxdata(sqlite3_context *pCtx, LONG iArg) (a0,d0)
VOID SQLite3SetAuxdata(sqlite3_context *pCtx, LONG iARg, APTR pAux, VOID (*xDelete)(APTR p)) (a0,d0,a1,a2)
VOID SQLite3ResultBlob(sqlite3_context *pCtx, CONST_APTR z, LONG n, VOID (*xDelete)(APTR p)) (a0,a1,d0,a2)
*VOID SQLite3ResultDouble(sqlite3_context *pCtx, double rVal) (a0,?)
VOID SQLite3ResultError(sqlite3_context *pCtx, CONST_STRPTR z, LONG n) (a0,a1,d0)
VOID SQLite3ResultInt(sqlite3_context *pCtx, LONG iVal) (a0,d0)
*VOID SQLite3ResultInt64(sqlite3_context *pCtx, sqlite_int64 iVal) (a0,?)
VOID SQLite3ResultNull(sqlite3_context *pCtx) (a0)
VOID SQLite3ResultText(sqlite3_context *pCtx, CONST_STRPTR z, LONG n, VOID (*xDelete)(APTR p)) (a0,a1,d0,a2)
VOID SQLite3ResultValue(sqlite3_context *pCtx, sqlite3_value *pValue) (a0,a1)
LONG SQLite3CreateCollation(sqlite3 *db, CONST_STRPTR zName, LONG eTextRep, APTR pCtx, LONG(*xCompare)(APTR p, LONG i, CONST_APTR p2, LONG j, CONST_APTR p3)) (a0,a1,d0,a2,a3)
LONG SQLite3CollationNeeded(sqlite3 *db, APTR pCollNeededArg, VOID (*xCollNeeded)(APTR p, sqlite3 *dv, LONG eTextRep, CONST_STRPTR z)) (a0,d0,a1)
LONG SQLite3Sleep(LONG ms) (d0)
LONG SQLite3Expired(sqlite3_stmt *pStmt) (a0)
LONG SQLite3TransferBindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt) (a0,a1)
LONG SQLite3GlobalRecover() ()
LONG SQLite3GetAutocommit(sqlite3 *db) (a0)
sqlite3 *SQLite3DbHandle(sqlite3_stmt *pStmt) (a0)
==version 41
*APTR SQLite3UpdateHook(sqlite3 *db, VOID (*callback)(APTR pUserData,LONG type, CONST_STRPTR dbName, CONST_STRPTR tableName, sqlite_int64 rowId), APTR pUserData) (a0,a1,a2)
APTR SQLite3RollbackHook(sqlite3 *db, VOID (* callback)(APTR pUserData), APTR pUserData) (a0,a1,a2)
LONG SQLite3EnableSharedCache(BOOL enable) (d0)
LONG SQLite3ReleaseMemory(LONG bytesCount) (d0)
VOID SQLite3SoftHeapLimit(LONG maxBytes) (d0)
VOID SQLite3ThreadCleanup() ()
*LONG SQLite3TableColumnMetadata(sqlite3 *db, CONST_STRPTR zDbName, CONST_STRPTR zTableName, CONST_STRPTR zColumnName, CONST_STRPTR *pzDataType, CONST_STRPTR *pzCollSeq, LONG *pNotNull, LONG *pPrimaryKey, LONG *pAutoinc) (a0,a1,a2,a3,d0,d1,d2,d3,d4)
==version 42
LONG SQLite3PrepareV2(sqlite3 *db, CONST_STRPTR zSql, LONG nBytes, sqlite3_stmt **ppStmt, CONST_STRPTR *pzTail) (a0,a1,d0,a2,a3)
==version 43
LONG SQLite3CreateFunction(sqlite3 *db, CONST_STRPTR zFunctionName, LONG nArg, LONG eTextRep, APTR userdata, VOID (*xFunc)(sqlite3_context *pCtx, LONG i, sqlite3_value **pVal), VOID (*xStep)(sqlite3_context *pCtx, LONG i, sqlite3_value **pVal), VOID (*xFinal)(sqlite3_context *pCtx)) (a0,a1,d0,d1,a2,a3,d2,d3)
LONG SQLite3CreateModule(sqlite3 *db, CONST_STRPTR zName, CONST sqlite3_module *methods, APTR clientData) (a0,a1,a2,a3)
LONG SQLite3DeclareVtab(sqlite3 *db, CONST_STRPTR zCreateTable) (a0,a1)
LONG SQLite3OverloadFunction(sqlite3 *db, CONST_STRPTR zFuncName, LONG nArg) (a0,a1,d0)
LONG SQLite3BlobOpen(sqlite3 *db, CONST_STRPTR zDb, CONST_STRPTR zTable, CONST_STRPTR zColumn, LONG iRow, LONG flags, sqlite3_blob **ppBlob) (a0,a1,a2,a3,d0,d1,a4)
LONG SQLite3BlobClose(sqlite3_blob *blob) (a0)
LONG SQLite3BlobBytes(sqlite3_blob *blob) (a0)
LONG SQLite3BlobRead(sqlite3_blob *blob, APTR z, LONG n, LONG iOffset) (a0,a1,d0,d1)
LONG SQLite3BlobWrite(sqlite3_blob *blob, CONST_APTR z, LONG n, LONG iOffset) (a0,a1,d0,d1)
LONG SQLite3ExtendedResultCodes(sqlite3 *db, LONG onoff) (a0,d0)

LONG SQLite3BindZeroBlob(sqlite3_stmt *pStmt, LONG i, LONG n) (a0,d0,d1)
CONST_STRPTR SQLite3ColumnDatabaseName(sqlite3_stmt *stmt, LONG n) (a0,d0)
CONST_STRPTR SQLite3ColumnTableName(sqlite3_stmt *stmt, LONG n) (a0,d0)
CONST_STRPTR SQLite3ColumnOriginName(sqlite3_stmt *stmt, LONG n) (a0,d0)
sqlite3_value *SQLite3ColumnValue(sqlite3_stmt *pStmt, LONG iCol) (a0,d0)
LONG SQLite3CreateCollationV2(sqlite3 *db, CONST_STRPTR zName, LONG eTextRep, APTR pCtx, LONG(*xCompare)(APTR p, LONG i, CONST_APTR p2, LONG j, CONST_APTR p3), VOID (*xDestroy)(APTR)) (a0,a1,d0,a2,a3,d1)
CONST_STRPTR SQLite3LibVersion() ()
LONG SQLite3LibversionNumber() ()
VOID SQLite3ResultErrorToobig(sqlite3_context *pCtx) (a0)
VOID SQLite3ResultZeroBlob(sqlite3_context *pCtx, LONG n) (a0,d0)
LONG SQLite3ValueNumericType(sqlite3_value *pVal) (a0)
*CONST_APTR SQLite3ValueText16(sqlite3_value *pVal) (a0)
*CONST_APTR SQLite3ValueText16le(sqlite3_value *pVal) (a0)
*CONST_APTR SQLite3ValueText16be(sqlite3_value *pVal) (a0)
==version 44
LONG SQLite3ConfigV(LONG op, APTR ap) (d0,a0)
==varargs
LONG SQLite3Config(LONG op, ULONG dummy, ...) (d0,a0)
LONG SQLlite3DbConfigV(sqlite3 *db, LONG op, APTR ap) (a0,d0,a1)
==varargs
LONG SQLlite3DbConfig(sqlite3 *db, LONG op, ULONG dummy, ...) (a0,d0,a1)
sqlite3_vfs *SQLite3VfsFind(CONST_STRPTR zVfsName) (a0)
LONG SQLite3VfsRegister(sqlite3_vfs *vfs, LONG makeDflt) (a0,d0)
LONG SQLite3VfsUnregister(sqlite3_vfs *vfs) (a0)
LONG SQLite3FileControl(sqlite3 *db, CONST_STRPTR zDbName, LONG op, void *arg) (a0,a1,d0,a2)
LONG SQLite3Status(LONG op, LONG *pCurrent, LONG *pHighwater, LONG resetFlag) (d0,a0,a1,d1)
LONG SQLite3DbStatus(sqlite3 *db, LONG op, LONG *pCur, LONG *pHiwtr, LONG resetFlg) (a0,d0,a1,a2,d1)
==end
