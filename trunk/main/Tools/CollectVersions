/* CollectVersions.rexx */
/* $Date$ */
/* $Revision$ */

options results

address command

PkgPath = "/products/scalos/update/"
tmpfname = "t:xyzzy"
versionfilename = "ram:versions.txt"


call addlib("rexxsupport.library", 0, -30, 0)

os = GetOsName();

PkgPath = PkgPath || os || "/"
LocalPkgPath = "RAM:" || strip(PkgPath, 'L', '/')

say "Deleting old directory tree..."
"delete " || LocalPkgPath || " all QUIET"

'makedir ' || LocalPkgPath || ' ALL'

call loadexistingversionfile(os, versionfilename)

rc = open( 'versionfile', versionfilename, 'append' )
if rc ~= 1 then
	do
	say "failed to open version file " || versionfilename " !"
	exit
	end

rc = seek( 'versionfile', 0, 'End' )

call writeln('versionfile', "; AUTOMATICALLY GENERATED FILE, DO NOT EDIT MANUALLY!!!")

/* Scalos main */
call getversion("scalos:", "Scalos", "Scalos.catalog")

/* Test-String for Base64 encoder */
/* say encodebase64('Polyfon zwitschernd aßen Mäxchens Vögel Rüben, Joghurt und Quark') */
/* output should be
UG9seWZvbiB6d2l0c2NoZXJuZCBhw59lbiBNw6R4Y2hlbnMgVsO2Z2VsIFLDvGJlbiwgSm9naHVydCB1bmQgUXVhcms=
*/

/* --- datatypes */
call getversion("sys:classes/datatypes", "amigaiconobject.datatype")
call getversion("sys:classes/datatypes", "amigaiconobj35.datatype")
call getversion("sys:classes/datatypes", "newiconobject.datatype")
call getversion("sys:classes/datatypes", "glowiconobject.datatype")
call getversion("sys:classes/datatypes", "pngiconobject.datatype")
call getversion("sys:classes/datatypes", "iconobject.datatype")

/* --- libraries */
call getversion("Libs:", "iconobject.library")
call getversion("Libs:", "popupmenu.library")
call getversion("Libs:", "preferences.library")
call getversion("Libs:", "scalosgfx.library")
call getversion("Libs:", "sqlite3.library")

/* --- prefs */
call getversion("scalos:prefs", "FileTypes.prefsplugin", "ScalosFileTypes.catalog")
call getversion("scalos:prefs", "Menu.prefsplugin", "ScalosMenu.catalog")
call getversion("scalos:prefs", "Pattern.prefsplugin", "ScalosPattern.catalog")
call getversion("scalos:prefs", "Palette.prefsplugin", "ScalosPalette.catalog")
call getversion("scalos:prefs", "PopupMenu.prefsplugin", "ScalosPopupMenu.catalog")
call getversion("scalos:prefs", "Scalos Menu", "ScalosMenu.catalog")
call getversion("scalos:prefs", "Scalos Palette", "ScalosPalette.catalog")
call getversion("scalos:prefs", "Scalos Pattern", "ScalosPattern.catalog")
call getversion("scalos:prefs", "Scalos Prefs", "Scalos_Prefs.catalog")

/* --- modules */
call getversion("scalos:modules", "Format_Disk.module", "FormatDisk.catalog")
call getversion("scalos:modules", "Delete.module", "Delete.catalog")
call getversion("scalos:modules", "Find.module", "Find.catalog")
call getversion("scalos:modules", "Empty_Trashcan.module", "Empty_Trashcan.catalog")
call getversion("scalos:modules", "Exchange.module", "Exchange.catalog")
call getversion("scalos:modules", "Execute_Command.module", "Execute_Command.catalog")
call getversion("scalos:modules", "IconProperties.module", "IconProperties.catalog")
call getversion("scalos:modules", "Information.module", "Information.catalog")
call getversion("scalos:modules", "NewDrawer.module", "NewDrawer.catalog")
call getversion("scalos:modules", "Rename.module", "Rename.catalog")
call getversion("scalos:modules", "WindowProperties.module", "WindowProperties.catalog")
call getversion("scalos:modules", "Updater.module", "Updater.catalog")

/*  --- plugins */
call getversion("Scalos:Plugins/Filetypes", "drawercontents.plugin", "DrawerContentsPlugin.catalog")
call getversion("Scalos:Plugins/Filetypes", "exifpicture.plugin", "ExifPicturePlugin.catalog")
call getversion("Scalos:Plugins/Filetypes", "picturedimensions.plugin", "PictureDimensionsPlugin.catalog")

/* OOP Plugins */
call getversion("Scalos:Plugins/OOP", "devicefilter.plugin")
call getversion("Scalos:Plugins/OOP", "persist.plugin")
call getversion("Scalos:Plugins/OOP", "title_clock.plugin")
call getversion("Scalos:Plugins/OOP", "title_envvar.plugin")
call getversion("Scalos:Plugins/OOP", "title_freepens.plugin")
call getversion("Scalos:Plugins/OOP", "volumegauge.plugin")
call getversion("Scalos:Plugins/OOP", "wb39.plugin")
call getversion("Scalos:Plugins/OOP", "wbrexx.plugin")
call getversion("Scalos:Plugins/OOP", "xtwindows.plugin")

/* Menu plugins */
call getversion("Scalos:Plugins/Menu", "sorted_cleanup.plugin")

/* Preview plugins */
call getversion("Scalos:Plugins/Preview", "defpicture.pvplugin")
call getversion("Scalos:Plugins/Preview", "jpegpicture.pvplugin")
call getversion("Scalos:Plugins/Preview", "video.pvplugin")

/* --- 3rd party stuff */
call getversion("libs:", "guigfx.library")
call getversion("libs:", "render.library")
call getversion("libs:", "popupmenu.library")

rc = close( 'versionfile' )

exit

/* -------------------------------------------------------------------------------- */

getversion: procedure expose PkgPath LocalPkgPath os
parse arg dirname, filename, catalogname

say "processing " || filename

connectstr = ""
if right(dirname,1) ~= ":" then connectstr = "/"

filePath = dirname || connectstr
'version "' || filePath || filename || '" >' tmpfname
/* say "version returned" rc */

if rc = 0 then
	do
	/* say dirname || connectstr || filename */

	rc = open( 'tmpfile', tmpfname, 'R' )
	versionstring = readln( 'tmpfile' )
	rc = close( 'tmpfile' )
	'delete ' || tmpfname || ' quiet'

	do wordpos=2 by 1
		vstring = subword(versionstring, wordpos)
		/* say wordpos vstring */
		/* say left(vstring, 1) */
		/* say index("Vv0123456789", left(vstring, 1)) */
		if index("Vv0123456789", left(vstring, 1)) > 0 then break
	end
	if index("Vv", left(vstring, 1)) > 0 then vstring = substr(vstring,2)
	vstring = subword(vstring, 1, 1)

	LHAName = LocalPkgPath || filename || ".lha"
	PkgName = PkgPath || filename || ".lha"
	Hash = "0"

	'lha -Iqr a "' || LHAName || '" -w "' || filePath || '" "' || filename || '"'
	if rc ~= 0 then
		do
		say "lha failed with " || filename || " not found!"
		return
		end

	/* try to add associated icon (may fail) */
	if fileexists(filePath || filename || '.info') = 1 then
		do
		'lha -Iqr a "' || LHAName || '" -w "' || filePath || '" "' || filename || '.info"'
		end

	if length(catalogname) > 0 then
		do
		catalogdir = "Locale:catalogs"
		languages = showdir(catalogdir)
		do n=0 by 1 to words(languages)
			lang = word(languages, n)
			scaloscatalogdir = catalogdir || "/" || lang || "/Scalos"
			scaloscatalogs = showdir(scaloscatalogdir)
			if length(scaloscatalogs) > 0 then
				do
				if index(scaloscatalogs, catalogname) > 0 then
					do
					catalog = scaloscatalogdir || "/" || catalogname
					'lha -Iqrx a "' || LHAName || '" "' || catalog || '"'
					if rc ~= 0 then
						do
						say "lha failed with " || filePath || " not found!"
						return
						end
					end
				end
		end
		end

	xfname = "t:signature.sha1"
	'openssl dgst -sha1 -sign Scalos.pem  -out "' || xfname || '" "' || LHAName || '"'
	if rc ~= 0 then
		do
		say "Failed to create signature for " || LHAName
		return
		end

	rc = open( 'sha1file', xfname, 'R' )
	hashbin = readch( 'sha1file', 128 )
	rc = close( 'sha1file' )
	'delete ' || xfname || ' quiet'
/*	say length(hashbin) */
/*	  Hash = c2x(hashbin) */
	Hash = encodebase64(hashbin)

	vfstring = 'DIR="' || dirname || '" FILE="' || filename || '" OS="' || os || '" VERSION=' || vstring || ' PKG="' || PkgName || '" HASH="' || Hash || '"'
	/* say vfstring */

	call writeln('versionfile', vfstring)
	end
else
	do
	say "File " || filePath || " not found!"
	end

return

/* -------------------------------------------------------------------------------- */

loadexistingversionfile: procedure
parse arg osname, versionfilename

say "Downloading existing " || versionfilename || "."

oldversionfilename = 'ram:versions-old'

/* use wget to download any existing version file */
'wget -q --output-document=' || oldversionfilename || ' http://scalos.noname.fr/versions.txt'
if rc ~= 0 then
	do
	say "wget failed to retrieve old version file !"
	exit
	end

rc = open( 'versionfile', versionfilename, 'write' )
if rc ~= 1 then
	do
	say "failed to open version file " || versionfilename " !"
	exit
	end

rc = open( 'oldversionfile', oldversionfilename, 'read' )
if rc ~= 1 then
	do
	say "failed to open old version file " || oldversionfilename " !"
	exit
	end

call writeln('versionfile', "; AUTOMATICALLY GENERATED FILE, DO NOT EDIT MANUALLY!!!")

/* copy all lines for operating systems different from "osname" to new file */
do while ~eof('oldversionfile')
	vline = readln('oldversionfile')
	if index(vline, 'OS="' || osname || '"') = 0 & length(vline) > 0 & left(vline, 1) ~= ';' then
		do
		rc = writeln('versionfile', vline)
		end
	end

rc = close( 'versionfile' )
rc = close( 'oldversionfile' )

/* remove old version file */
'delete ' || oldversionfilename || ' quiet'

return

/* -------------------------------------------------------------------------------- */

fileexists: procedure
parse arg filename

rc = open( 'testfile', filename, 'read' )
if rc ~= 1 then
	do
	found = 0
	end
else
	do
	found = 1
	rc = close( 'testfile' )
	end

return found

/* -------------------------------------------------------------------------------- */

encodebase64: procedure
parse arg binstring

/* Encodes a file in Base64.                         */
/*                                                   */
/* Written by James L. Dean                          */

char_set='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
b64string = ''

binlength = length(binstring)

DO WHILE (binlength > 0)
	num_octets=0
	triple=0
	DO octet_num=1 TO 3
		IF binlength > 0 THEN
			DO
			octet = left(binstring, 1)
			binstring = substr(binstring, 2)
			triple = 256 * triple + C2D(octet)
			num_octets = num_octets + 1
			binlength = binlength - 1
			END
		ELSE
			triple = 256 * triple
	END

	num_sextets = (8 * num_octets) % 6

	IF 6*num_sextets < 8*num_octets THEN
		num_sextets = num_sextets + 1

	IF num_sextets > 0 THEN
		DO
		sextet_num = 1
		DO WHILE(sextet_num <= 4)
			quotient = triple % 64
			stack.sextet_num = triple - 64 * quotient
			sextet_num = sextet_num + 1
			triple = quotient
			END
		DO WHILE (num_sextets >= 1)
			sextet_num = sextet_num-1
			b64string = b64string || SUBSTR(char_set, 1 + stack.sextet_num, 1)
			num_sextets = num_sextets-1
			END
		DO WHILE (sextet_num > 1)
			b64string = b64string || '='
			sextet_num = sextet_num - 1
			END
		END
END

return b64string

/* -------------------------------------------------------------------------------- */

GetOsName: procedure

'version >' tmpfname
rc = open( 'tmpfile', tmpfname, 'R' )
versionstring = readln( 'tmpfile' )
rc = close( 'tmpfile' )
'delete ' || tmpfname || ' quiet'
if index(versionstring, "MorphOS") > 0 then
	do
	os = "MorphOS"
	end
else
	do
	versionstring =	strip(subword(versionstring, 2, 1), 'B', ',')
	if versionstring > 50 then
		os = "AmigaOS4"
	else
		os = "AmigaOS3"
	end

return os

END

/* -------------------------------------------------------------------------------- */

